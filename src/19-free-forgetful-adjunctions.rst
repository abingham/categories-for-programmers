.. raw:: html

   <div id="rap">

.. raw:: html

   <div id="header">

-  `Home <https://bartoszmilewski.com>`__
-  `About <https://bartoszmilewski.com/about/>`__

.. raw:: html

   <div id="headimg">

.. rubric:: `  Bartosz Milewski's Programming
   Cafe <https://bartoszmilewski.com>`__
   :name: bartosz-milewskis-programming-cafe

.. raw:: html

   <div id="desc">

Concurrency, C++, Haskell, Category Theory

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="main">

.. raw:: html

   <div id="content">

.. raw:: html

   <div
   class="post-5471 post type-post status-publish format-standard hentry category-programming">

June 15, 2016

.. raw:: html

   <div class="post-info">

.. rubric:: Free/Forgetful Adjunctions
   :name: freeforgetful-adjunctions
   :class: post-title

Posted by Bartosz Milewski under
`Programming <https://bartoszmilewski.com/category/programming/>`__
`1
Comment <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/#comments>`__ 

.. raw:: html

   </div>

.. raw:: html

   <div class="post-content">

.. raw:: html

   <div id="pd_rating_holder_2203687_post_5471" class="pd-rating">

.. raw:: html

   </div>

    This is part 19 of Categories for Programmers. Previously:
    `Adjunctions <https://bartoszmilewski.com/2016/04/18/adjunctions/>`__.
    See the `Table of
    Contents <https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/>`__.

.. rubric:: Free Monoid from Adjunction
   :name: free-monoid-from-adjunction

Free constructions are a powerful application of adjunctions. A *free
functor* is defined as the left adjoint to a *forgetful functor*. A
forgetful functor is usually a pretty simple functor that forgets some
structure. For instance, lots of interesting categories are built on top
of sets. But categorical objects, which abstract those sets, have no
internal structure — they have no elements. Still, those objects often
carry the memory of sets, in the sense that there is a mapping — a
functor — from a given category *C* to **Set**. A set corresponding to
some object in *C* is called its *underlying set*.

Monoids are such objects that have underlying sets — sets of elements.
There is a forgetful functor ``U`` from the category of monoids **Mon**
to the category of sets, which maps monoids to their underlying sets. It
also maps monoid morphisms (homomorphisms) to functions between sets.

I like to think of **Mon** as having split personality. On the one hand,
it’s a bunch of sets with multiplication and unit elements. On the other
hand, it’s a category with featureless objects whose only structure is
encoded in morphisms that go between them. Every set-function that
preserves multiplication and unit gives rise to a morphism in **Mon**.

Things to keep in mind:

-  There may be many monoids that map to the same set, and
-  There are fewer (or at most as many as) monoid morphisms than there
   are functions between their underlying sets.

.. raw:: html

   <div id="attachment_5532" class="wp-caption alignnone"
   data-shortcode="caption" style="width: 387px">

|Forgetful|
Monoids m\ :sub:`1` and m\ :sub:`2` have the same underlying set. There
are more functions between the underlying sets of m\ :sub:`2` and
m\ :sub:`3` than there are morphisms between them.

.. raw:: html

   </div>

The functor ``F`` that’s the left adjoint to the forgetful functor ``U``
is the free functor that builds free monoids from their generator sets.
The adjunction follows from the `free monoid universal
construction <https://bartoszmilewski.com/2015/07/21/free-monoids/>`__
we’ve discussed before.

In terms of hom-sets, we can write this adjunction as:

::

    Mon(F x, m) ≅ Set(x, U m)

This (natural in ``x`` and ``m``) isomorphism tells us that:

-  For every monoid homomorphism between the free monoid ``F x``
   generated by ``x`` and an arbitrary monoid ``m`` there is a unique
   function that embeds the set of generators ``x`` in the underlying
   set of ``m``. It’s a function in ``Set(x, U m)``.
-  For every function that embeds ``x`` in the underlying set of some
   ``m`` there is a unique monoid morphism between the free monoid
   generated by ``x`` and the monoid ``m``. (This is the morphism we
   called ``h`` in our universal construction.)

|FreeMonAdjunction|

The intuition is that ``F x`` is the “maximum” monoid that can be built
on the basis of ``x``. If we could look inside monoids, we would see
that any morphism that belongs to ``Mon(F x, m)`` *embeds* this free
monoid in some other monoid ``m``. It does it by possibly identifying
some elements. In particular, it embeds the generators of ``F x`` (i.e.,
the elements of ``x``) in ``m``. The adjunction shows that the embedding
of ``x``, which is given by a function from ``Set(x, U m)`` on the
right, uniquely determines the embedding of monoids on the left, and
vice versa.

In Haskell, the list data structure is a free monoid (with some caveats:
see `Dan Doel’s blog
post <http://comonad.com/reader/2015/free-monoids-in-haskell/>`__). A
list type ``[a]`` is a free monoid with the type ``a`` representing the
set of generators. For instance, the type ``[Char]`` contains the unit
element — the empty list ``[]`` — and the singletons like ``['a']``,
``['b']`` — the generators of the free monoid. The rest is generated by
applying the “product.” Here, the product of two lists simply appends
one to another. Appending is associative and unital (that is, there is a
neutral element — here, the empty list). A free monoid generated by
``Char`` is nothing but the set of all strings of characters from
``Char``. It’s called ``String`` in Haskell:

::

    type String = [Char]

(``type`` defines a type synonym — a different name for an existing
type).

Another interesting example is a free monoid built from just one
generator. It’s the type of the list of units, ``[()]``. Its elements
are ``[]``, ``[()]``, ``[(), ()]``, etc. Every such list can be
described by one natural number — its length. There is no more
information encoded in the list of units. Appending two such lists
produces a new list whose length is the sum of the lengths of its
constituents. It’s easy to see that the type ``[()]`` is isomorphic to
the additive monoid of natural numbers (with zero). Here are the two
functions that are the inverse of each other, witnessing this
isomorphism:

::

    toNat :: [()] -> Int
    toNat = length

    toLst :: Int -> [()]
    toLst n = replicate n ()

For simplicity I used the type ``Int`` rather than ``Natural``, but the
idea is the same. The function ``replicate`` creates a list of length
``n`` pre-filled with a given value — here, the unit.

.. rubric:: Some Intuitions
   :name: some-intuitions

What follows are some hand-waving arguments. Those kind of arguments are
far from rigorous, but they help in forming intuitions.

To get some intuition about the free/forgetful adjunctions it helps to
keep in mind that functors and functions are lossy in nature. Functors
may collapse multiple objects and morphisms, functions may bunch
together multiple elements of a set. Also, their image may cover only
part of their codomain.

An “average” hom-set in **Set** will contain a whole spectrum of
functions starting with the ones that are least lossy (e.g., injections
or, possibly, isomorphisms) and ending with constant functions that
collapse the whole domain to a single element (if there is one).

I tend to think of morphisms in an arbitrary category as being lossy
too. It’s just a mental model, but it’s a useful one, especially when
thinking of adjunctions — in particular those in which one of the
categories is **Set**.

Formally, we can only speak of morphisms that are invertible
(isomorphisms) or non-invertible. It’s that latter kind that may be
though of as lossy. There is also a notion of mono- and epi- morphisms
that generalize the idea of injective (non-collapsing) and surjective
(covering the whole codomain) functions, but it’s possible to have a
morphism that is both mono and epi, and which is still non-invertible.

In the Free ⊣ Forgetful adjunction, we have the more constrained
category *C* on the left, and a less constrained category *D* on the
right. Morphisms in *C* are “fewer” because they have to preserve some
additional structure. In the case of **Mon**, they have to preserve
multiplication and unit. Morphisms in *D* don’t have to preserve as much
structure, so there are “more” of them.

When we apply a forgetful functor ``U`` to an object ``c`` in *C*, we
think of it as revealing the “internal structure” of ``c``. In fact, if
*D* is **Set** we think of ``U`` as *defining* the internal structure of
``c`` — its underlying set. (In an arbitrary category, we can’t talk
about the internals of an object other than through its connections to
other objects, but here we are just hand-waving.)

If we map two objects ``c'`` and ``c`` using ``U``, we expect that, in
general, the mapping of the hom-set ``C(c', c)`` will cover only a
subset of ``D(U c', U c)``. That’s because morphisms in ``C(c', c)``
have to preserve the additional structure, whereas the ones in
``D(U c', U c)`` don’t.

|ForgettingMorphisms|

But since an adjunction is defined as an *isomporphism* of particular
hom-sets, we have to be very picky with our selection of ``c'``. In the
adjunction, ``c'`` is picked not from just anywhere in *C*, but from the
(presumably smaller) image of the free functor ``F``:

::

    C(F d, c) ≅ D(d, U c)

The image of ``F`` must therefore consist of objects that have lots of
morphisms going to an arbitrary ``c``. In fact, there has to be as many
structure-preserving morphisms from ``F d`` to ``c`` as there are
non-structure preserving morphisms from ``d`` to ``U c``. It means that
the image of ``F`` must consist of essentially structure-free objects
(so that there is no structure to preserve by morphisms). Such
“structure-free” objects are called free objects.

|FreeImage|

In the monoid example, a free monoid has no structure other than what’s
generated by unit and associativity laws. Other than that, all
multiplications produce brand new elements.

In a free monoid, 2\*3 is not 6 — it’s a new element [2, 3]. Since there
is no identification of [2, 3] and 6, a morphism from this free monoid
to any other monoid ``m`` is allowed to map them separately. But it’s
also okay for it to map both [2, 3] and 6 (their product) to the same
element of ``m``. Or to identify [2, 3] and 5 (their sum) in an additive
monoid, and so on. Different identifications give you different monoids.

This leads to another interesting intuition: Free monoids, instead of
performing the monoidal operation, accumulate the arguments that were
passed to it. Instead of multiplying 2 and 3 they remember 2 and 3 in a
list. The advantage of this scheme is that we don’t have to specify what
monoidal operation we will use. We can keep accumulating arguments, and
only at the end apply an operator to the result. And it’s then that we
can chose what operator to apply. We can add the numbers, or multiply
them, or perform addition modulo 2, and so on. A free monoid separates
the creation of an expression from its evaluation. We’ll see this idea
again when we talk about algebras.

This intuition generalizes to other, more elaborate free constructions.
For instance, we can accumulate whole expression trees before evaluating
them. The advantage of this approach is that we can transform such trees
to make the evaluation faster or less memory consuming. This is, for
instance, done in implementing matrix calculus, where eager evaluation
would lead to lots of allocations of temporary arrays to store
intermediate results.

.. rubric:: Challenges
   :name: challenges

#. Consider a free monoid built from a singleton set as its generator.
   Show that there is a one-to-one correspondence between morphisms from
   this free monoid to any monoid ``m``, and functions from the
   singleton set to the underlying set of ``m``.

Next: `Monads: Programmer’s
Definition <https://bartoszmilewski.com/2016/11/21/monads-programmers-definition/>`__.

.. rubric:: Acknowledgments
   :name: acknowledgments

| I’d like to thank Gershom Bazerman for checking my math and logic, and
  André van Meulebrouck, who has been volunteering his editing help
  throughout this series of posts.
| `Follow @BartoszMilewski <https://twitter.com/BartoszMilewski>`__

.. raw:: html

   <div class="wpcnt">

.. raw:: html

   <div class="wpa wpmrec wpmrec2x">

Advertisements

.. raw:: html

   <div class="u">

.. raw:: html

   </div>

.. raw:: html

   <div id="crt-1003015272" style="width:300px;height:250px;">

.. raw:: html

   </div>

.. raw:: html

   <div id="crt-1664683209" style="width:300px;height:250px;">

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="jp-post-flair"
   class="sharedaddy sd-rating-enabled sd-like-enabled sd-sharing-enabled">

.. raw:: html

   <div class="sharedaddy sd-sharing-enabled">

.. raw:: html

   <div
   class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing">

.. rubric:: Share this:
   :name: share-this
   :class: sd-title

.. raw:: html

   <div class="sd-content">

-  `Reddit <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/?share=reddit>`__
-  `More <#>`__
-  

.. raw:: html

   <div class="sharing-hidden">

.. raw:: html

   <div class="inner" style="display: none;">

-  `Twitter <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/?share=twitter>`__
-  `LinkedIn <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/?share=linkedin>`__
-  
-  `Google <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/?share=google-plus-1>`__
-  `Pocket <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/?share=pocket>`__
-  
-  `Facebook <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/?share=facebook>`__
-  `Email <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/?share=email>`__
-  
-  

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="like-post-wrapper-3549518-5471-59ae3cb64e043"
   class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded"
   data-src="//widgets.wp.com/likes/#blog_id=3549518&amp;post_id=5471&amp;origin=bartoszmilewski.wordpress.com&amp;obj_id=3549518-5471-59ae3cb64e043"
   data-name="like-post-frame-3549518-5471-59ae3cb64e043">

.. rubric:: Like this:
   :name: like-this
   :class: sd-title

.. raw:: html

   <div class="likes-widget-placeholder post-likes-widget-placeholder"
   style="height: 55px;">

Like Loading...

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="jp-relatedposts" class="jp-relatedposts">

.. rubric:: *Related*
   :name: related
   :class: jp-relatedposts-headline

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div class="post-info">

.. raw:: html

   </div>

.. raw:: html

   <div class="post-footer">

 

.. raw:: html

   </div>

.. raw:: html

   </div>

.. rubric:: One Response to “Free/Forgetful Adjunctions”
   :name: comments

#. 

   .. raw:: html

      <div id="comment-65797">

   .. raw:: html

      </div>

   .. raw:: html

      <div id="div-comment-65797">

   .. raw:: html

      <div class="comment-author vcard">

   `The Week in C++ 2016.24: June 11th-18th \| Utah C++  Users
   Group <https://utahcpp.wordpress.com/2016/06/22/the-week-in-c-2016-24-june-11th-18th/>`__
   Says:

   .. raw:: html

      </div>

   `June 22, 2016 at 10:16
   am <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/#comment-65797>`__
   […] Free/Forgetful Adjunctions by Bartosz Milewski […]

   .. raw:: html

      <div class="reply">

   .. raw:: html

      </div>

   .. raw:: html

      </div>

.. raw:: html

   <div class="navigation">

.. raw:: html

   <div class="alignleft">

.. raw:: html

   </div>

.. raw:: html

   <div class="alignright">

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="respond" class="comment-respond">

.. rubric:: Leave a Reply `Cancel
   reply </2016/06/15/freeforgetful-adjunctions/#respond>`__
   :name: reply-title
   :class: comment-reply-title

.. raw:: html

   <div class="comment-form-field comment-textarea">

Enter your comment here...

.. raw:: html

   <div id="comment-form-comment">

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="comment-form-identity">

.. raw:: html

   <div id="comment-form-nascar">

Fill in your details below or click an icon to log in:

-  ` <#comment-form-guest>`__
-  ` <#comment-form-load-service:WordPress.com>`__
-  ` <#comment-form-load-service:Twitter>`__
-  ` <#comment-form-load-service:Facebook>`__
-  

.. raw:: html

   </div>

.. raw:: html

   <div id="comment-form-guest" class="comment-form-service selected">

.. raw:: html

   <div class="comment-form-padder">

.. raw:: html

   <div class="comment-form-avatar">

|Gravatar|

.. raw:: html

   </div>

.. raw:: html

   <div class="comment-form-fields">

.. raw:: html

   <div class="comment-form-field comment-form-email">

Email (required) (Address never made public)

.. raw:: html

   <div class="comment-form-input">

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div class="comment-form-field comment-form-author">

Name (required)

.. raw:: html

   <div class="comment-form-input">

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div class="comment-form-field comment-form-url">

Website

.. raw:: html

   <div class="comment-form-input">

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="comment-form-wordpress" class="comment-form-service">

.. raw:: html

   <div class="comment-form-padder">

.. raw:: html

   <div class="comment-form-avatar">

|WordPress.com Logo|

.. raw:: html

   </div>

.. raw:: html

   <div class="comment-form-fields">

**** You are commenting using your WordPress.com account.
( `Log Out <javascript:HighlanderComments.doExternalLogout(%20'wordpress'%20);>`__ / `Change <#>`__ )

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="comment-form-twitter" class="comment-form-service">

.. raw:: html

   <div class="comment-form-padder">

.. raw:: html

   <div class="comment-form-avatar">

|Twitter picture|

.. raw:: html

   </div>

.. raw:: html

   <div class="comment-form-fields">

**** You are commenting using your Twitter account.
( `Log Out <javascript:HighlanderComments.doExternalLogout(%20'twitter'%20);>`__ / `Change <#>`__ )

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="comment-form-facebook" class="comment-form-service">

.. raw:: html

   <div class="comment-form-padder">

.. raw:: html

   <div class="comment-form-avatar">

|Facebook photo|

.. raw:: html

   </div>

.. raw:: html

   <div class="comment-form-fields">

**** You are commenting using your Facebook account.
( `Log Out <javascript:HighlanderComments.doExternalLogout(%20'facebook'%20);>`__ / `Change <#>`__ )

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="comment-form-googleplus" class="comment-form-service">

.. raw:: html

   <div class="comment-form-padder">

.. raw:: html

   <div class="comment-form-avatar">

|Google+ photo|

.. raw:: html

   </div>

.. raw:: html

   <div class="comment-form-fields">

**** You are commenting using your Google+ account.
( `Log Out <javascript:HighlanderComments.doExternalLogout(%20'googleplus'%20);>`__ / `Change <#>`__ )

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="comment-form-load-service" class="comment-form-service">

.. raw:: html

   <div class="comment-form-posting-as-cancel">

`Cancel <javascript:HighlanderComments.cancelExternalWindow();>`__

.. raw:: html

   </div>

Connecting to %s

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="comment-form-subscribe">

Notify me of new comments via email.

Notify me of new posts via email.

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div style="clear: both">

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="sidebar">

.. rubric:: Archived Entry
   :name: archived-entry

-  **Post Date :**
-  June 15, 2016 at 7:39 am
-  **Category :**
-  `Programming <https://bartoszmilewski.com/category/programming/>`__
-  **Do More :**
-  You can `leave a response <#respond>`__, or
   `trackback <https://bartoszmilewski.com/2016/06/15/freeforgetful-adjunctions/trackback/>`__
   from your own site.

.. raw:: html

   </div>

`Blog at WordPress.com. <https://wordpress.com/?ref=footer_blog>`__

.. raw:: html

   <div style="display:none">

.. raw:: html

   </div>

.. raw:: html

   <div id="carousel-reblog-box">

Post to

.. raw:: html

   <div class="submit">

`Cancel <#>`__

.. raw:: html

   </div>

.. raw:: html

   <div class="arrow">

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="sharing_email" style="display: none;">

Send to Email Address Your Name Your Email Address

.. raw:: html

   <div id="sharing_recaptcha" class="recaptcha">

.. raw:: html

   </div>

|loading| `Cancel <#cancel>`__

.. raw:: html

   <div class="errors errors-1" style="display: none;">

Post was not sent - check your email addresses!

.. raw:: html

   </div>

.. raw:: html

   <div class="errors errors-2" style="display: none;">

Email check failed, please try again

.. raw:: html

   </div>

.. raw:: html

   <div class="errors errors-3" style="display: none;">

Sorry, your blog cannot share posts by email.

.. raw:: html

   </div>

.. raw:: html

   </div>

.. raw:: html

   <div id="likes-other-gravatars">

.. raw:: html

   <div class="likes-text">

%d bloggers like this:

.. raw:: html

   </div>

.. raw:: html

   </div>

|image10|

.. raw:: html

   </div>

.. raw:: html

   </div>

.. |Forgetful| image:: https://bartoszmilewski.files.wordpress.com/2016/05/forgetful.jpg?w=377&h=234
   :class: wp-image-5532
   :width: 377px
   :height: 234px
   :target: https://bartoszmilewski.files.wordpress.com/2016/05/forgetful.jpg
.. |FreeMonAdjunction| image:: https://bartoszmilewski.files.wordpress.com/2016/05/freemonadjunction.jpg?w=512&h=203
   :class: alignnone wp-image-5534
   :width: 512px
   :height: 203px
   :target: https://bartoszmilewski.files.wordpress.com/2016/05/freemonadjunction.jpg
.. |ForgettingMorphisms| image:: https://bartoszmilewski.files.wordpress.com/2016/05/forgettingmorphisms.jpg?w=413&h=219
   :class: alignnone wp-image-5536
   :width: 413px
   :height: 219px
   :target: https://bartoszmilewski.files.wordpress.com/2016/05/forgettingmorphisms.jpg
.. |FreeImage| image:: https://bartoszmilewski.files.wordpress.com/2016/05/freeimage.jpg?w=422&h=249
   :class: alignnone wp-image-5537
   :width: 422px
   :height: 249px
   :target: https://bartoszmilewski.files.wordpress.com/2016/05/freeimage.jpg
.. |Gravatar| image:: https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25
   :class: no-grav
   :width: 25px
   :target: https://gravatar.com/site/signup/
.. |WordPress.com Logo| image:: https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25
   :class: no-grav
   :width: 25px
.. |Twitter picture| image:: https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25
   :class: no-grav
   :width: 25px
.. |Facebook photo| image:: https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25
   :class: no-grav
   :width: 25px
.. |Google+ photo| image:: https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25
   :class: no-grav
   :width: 25px
.. |loading| image:: https://s2.wp.com/wp-content/mu-plugins/post-flair/sharing/images/loading.gif
   :class: loading
   :width: 16px
   :height: 16px
.. |image10| image:: https://pixel.wp.com/b.gif?v=noscript

